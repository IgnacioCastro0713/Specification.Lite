// <auto-generated />
using System;
using API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(TestDbContext))]
    partial class TestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.17");

            modelBuilder.Entity("API.TestDeepEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MoreDeepId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MoreDeepId");

                    b.ToTable("TestDeepEntities");
                });

            modelBuilder.Entity("API.TestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestEntities");
                });

            modelBuilder.Entity("API.TestEntityWithRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RelatedId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RelatedId");

                    b.ToTable("TestEntityWithRelations");
                });

            modelBuilder.Entity("API.TestMoreDeepEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestMoreDeepEntities");
                });

            modelBuilder.Entity("API.TestNestedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestNestedEntities");
                });

            modelBuilder.Entity("API.TestRelatedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("NestedId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Salary")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NestedId");

                    b.ToTable("TestRelatedEntities");
                });

            modelBuilder.Entity("TestDeepEntityTestNestedEntity", b =>
                {
                    b.Property<int>("DeepsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestNestedEntityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeepsId", "TestNestedEntityId");

                    b.HasIndex("TestNestedEntityId");

                    b.ToTable("TestDeepEntityTestNestedEntity");
                });

            modelBuilder.Entity("API.TestDeepEntity", b =>
                {
                    b.HasOne("API.TestMoreDeepEntity", "MoreDeep")
                        .WithMany()
                        .HasForeignKey("MoreDeepId");

                    b.Navigation("MoreDeep");
                });

            modelBuilder.Entity("API.TestEntityWithRelation", b =>
                {
                    b.HasOne("API.TestRelatedEntity", "Related")
                        .WithMany()
                        .HasForeignKey("RelatedId");

                    b.Navigation("Related");
                });

            modelBuilder.Entity("API.TestRelatedEntity", b =>
                {
                    b.HasOne("API.TestNestedEntity", "Nested")
                        .WithMany()
                        .HasForeignKey("NestedId");

                    b.Navigation("Nested");
                });

            modelBuilder.Entity("TestDeepEntityTestNestedEntity", b =>
                {
                    b.HasOne("API.TestDeepEntity", null)
                        .WithMany()
                        .HasForeignKey("DeepsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.TestNestedEntity", null)
                        .WithMany()
                        .HasForeignKey("TestNestedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
